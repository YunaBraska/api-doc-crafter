name: "Build"

on:
  schedule:
    - cron: "08 20 * * *"
  workflow_dispatch:
    inputs:
      ref:
        type: string
        required: false
        description: "[ref] e.g. branch, tag or commit to checkout [default: github_ref_name || github_head_ref ]"
      run_test:
        type: boolean
        required: false
        default: true
        description: "Runs tests"
      run_deploy:
        type: boolean
        required: false
        default: false
        description: "Runs deploys to Github - false = only release on updates"

concurrency:
  group: "build-${{ github.event.repository.name }}"
  cancel-in-progress: false

jobs:
  deploy:
    name: "Build"
    timeout-minutes: 5
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      # update repository
      contents: write
      # create download GitHub packages
      packages: write
      # update deploy status
      deployments: write
    outputs:
      version: ${{ steps.semver_info.outputs.clean_semver }}
      has_changes: ${{ steps.update.outputs.has_changes }}
    steps:
      - name: "🧑‍💻 Checkout [${{ inputs.ref || github.ref || github.ref_name || github.head_ref }}]"
        uses: actions/checkout@main
        with:
          fetch-depth: 1
          ref: ${{ inputs.ref || github.ref || github.ref_name || github.head_ref }}
          token: ${{ secrets.BOT_TOKEN || secrets.GITHUB_TOKEN }}
      - name: "♻️ Restore cache [unix-build-${{ hashFiles('**/pom.xml', '**/build.gradle*') }}]"
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: unix-build-${{ hashFiles('**/pom.xml', '**/build.gradle*') }}
          restore-keys: unix-build-${{ hashFiles('**/pom.xml', '**/build.gradle*') }}
      - name: "🔍 Read Java Info"
        id: "java_info"
        uses: YunaBraska/java-info-action@main
      - name: "☕ Setup Java [${{ steps.java_info.outputs.java_version }}] Builder [${{ steps.java_info.outputs.builder_name }}] [${{ steps.java_info.outputs.builder_version }}]"
        uses: actions/setup-java@main
        with:
          java-version: ${{ steps.java_info.outputs.java_version }}
          distribution: 'temurin'
      - name: "🗒️ Maven License Info"
        id: "license_info"
        uses: YunaBraska/maven-license-info-action@main
        with:
          exclude-scopes: 'test,provided,system'
          output-dir: 'docs/licenses'
      - name: "🔄 Update"
        id: "update"
        run: |
          ${{ steps.java_info.outputs.cmd_update_wrapper }}
          if [ "${{ steps.java_info.outputs.builder_name }}" != "Gradle" ]; then
            ${{ steps.java_info.outputs.cmd_update_props }}
            ${{ steps.java_info.outputs.cmd_update_parent }}
          fi
          git config --global user.name 'Kira Bot'
          git config --global user.email 'kira@noreply.github.com'
          if [[ -n $(git status -s) && ${{ startsWith(inputs.ref, 'refs/heads/') }} ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_USER: 'GithubBot'
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN || secrets.GITHUB_TOKEN }}
      - name: "🧪 Build & Test"
        if: ${{ inputs.run_test }}
        run: ${{ steps.java_info.outputs.cmd_test_build }}
        env:
          GITHUB_USER: 'GithubBot'
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN || secrets.GITHUB_TOKEN }}
      - name: "🏗️ Build only"
        if: ${{ !inputs.run_test }}
        run: ${{ steps.java_info.outputs.cmd_build }}
        env:
          GITHUB_USER: 'GithubBot'
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN || secrets.GITHUB_TOKEN }}
      - name: "📝 Read Version [${{ steps.java_info.outputs.project_version }}]"
        if: ${{ steps.update.outputs.has_changes == 'true' }}
        uses: YunaBraska/semver-info-action@main
        id: "semver_info"
        with:
          semver-a: ${{ steps.java_info.outputs.project_version }}
          increase-a: 'minor'
      - name: "💾 Commit & Tag [${{ steps.semver_info.outputs.clean_semver }}]"
        if: ${{ steps.update.outputs.has_changes == 'true' }}
        run: |
          ${{ steps.java_info.outputs.cmd }} -B -q versions:set -DnewVersion=${{ steps.semver_info.outputs.clean_semver }} -DgenerateBackupPoms=false
          git add .
          git commit -m "chore: update ${{ steps.semver_info.outputs.clean_semver }}"
          git push origin HEAD:${{ inputs.ref || github.ref || github.ref_name || github.head_ref }}
          # git tag ${{ steps.semver_info.outputs.clean_semver }}; 
          # git push origin ${{ steps.semver_info.outputs.clean_semver }}
  release:
    needs: deploy
    if: ${{ github.event.inputs.run_deploy || needs.deploy.outputs.has_changes == 'true' }}
    name: "Trigger Release"
    uses: YunaBraska/api-doc-crafter/.github/workflows/github_release.yml@main
    secrets: inherit
    with:
      ref: ${{ inputs.ref || github.ref || github.ref_name || github.head_ref }}
      version: ${{ needs.deploy.outputs.version }}
